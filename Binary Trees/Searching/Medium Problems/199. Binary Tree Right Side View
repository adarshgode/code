/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Pair{
    int hd;
    TreeNode root;
    Pair(int hd,TreeNode root){
        this.hd = hd;
        this.root = root;
    }
}
class Solution {
    static ArrayList<Integer> rightSideView(TreeNode root) {
        ArrayList<Integer> ans = new ArrayList<>();
        if(root == null) return ans;
        Map<Integer,Integer> mpp = new TreeMap<>();
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(0,root));
        while(!q.isEmpty()){
            Pair it = q.remove();
            int hd = it.hd;
            TreeNode node = it.root;
            mpp.put(hd,node.val);
            if(node.left != null) q.add(new Pair(hd+1,node.left));
            if(node.right != null) q.add(new Pair(hd+1,node.right));
        }
        for(Map.Entry<Integer,Integer> entry : mpp.entrySet()){
            ans.add(entry.getValue());
        }
        return ans;
    }
}
