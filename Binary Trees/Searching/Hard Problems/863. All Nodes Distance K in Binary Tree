/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    HashMap<TreeNode, TreeNode> parentMap = new HashMap<>();

    
    void inOrder(TreeNode root) {
        if (root == null) return;
        if (root.left != null) {
            parentMap.put(root.left, root);
            inOrder(root.left);
        }
        if (root.right != null) {
            parentMap.put(root.right, root);
            inOrder(root.right);
        }
    }

    
    void BFS(TreeNode target, int k, List<Integer> ans) {
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(target);
        HashSet<TreeNode> visited = new HashSet<>();
        visited.add(target);

        while (!queue.isEmpty()) {
            int size = queue.size();
            if (k == 0) {
                
                for (int i = 0; i < size; i++) {
                    ans.add(queue.poll().val);
                }
                return;
            }
            for (int i = 0; i < size; i++) {
                TreeNode curr = queue.poll();

                
                if (curr.left != null && !visited.contains(curr.left)) {
                    queue.add(curr.left);
                    visited.add(curr.left);
                }

                
                if (curr.right != null && !visited.contains(curr.right)) {
                    queue.add(curr.right);
                    visited.add(curr.right);
                }

                
                if (parentMap.containsKey(curr) && !visited.contains(parentMap.get(curr))) {
                    queue.add(parentMap.get(curr));
                    visited.add(parentMap.get(curr));
                }
            }
            k--; 
        }
    }

    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> ans = new ArrayList<>();
        
        inOrder(root);
        
        BFS(target, k, ans);
        return ans;
    }
}
