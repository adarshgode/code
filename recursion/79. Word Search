class Solution {
    public boolean exist(char[][] board, String word) {
        for (int row = 0; row < board.length; row++) {
            for (int col = 0; col < board[0].length; col++) {
                if (board[row][col] == word.charAt(0) && dfs(board, row, col, word, 0)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean dfs(char[][] board, int row, int col, String word, int index){
        if (index == word.length()) {
            return true;
        }

        if (row < 0 || row >= board.length || col < 0 || col >= board[0].length || board[row][col] != word.charAt(index)) {
            return false;
        }

        board[row][col] = '#'; // Mark as visited to avoid cycles
        boolean found = dfs(board, row + 1, col, word, index + 1) ||
                       dfs(board, row - 1, col, word, index + 1) ||
                       dfs(board, row, col + 1, word, index + 1) ||
                       dfs(board, row, col - 1, word, index + 1);
        board[row][col] = word.charAt(index); // Restore original character
        return found;
    }
}
