class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }

    boolean solve(char[][] board) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') {
                    for (char k = '1'; k <= '9'; k++) { // Try values '1' to '9'
                        if (isValid(i, j, k, board)) {
                            board[i][j] = k; // Set current cell to valid value

                            if (solve(board)) { // Recursive call
                                return true;
                            } else {
                                board[i][j] = '.'; // Backtrack if solution doesn't work
                            }
                        }
                    }
                    return false; // If no valid value can be placed
                }
            }
        }
        return true; // Sudoku is solved
    }

    boolean isValid(int row, int col, char val, char[][] board) {
        // Check row and column
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == val || board[i][col] == val) {
                return false;
            }
        }

        // Check 3x3 sub-grid
        int subGridRowStart = (row / 3) * 3;
        int subGridColStart = (col / 3) * 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[subGridRowStart + i][subGridColStart + j] == val) {
                    return false;
                }
            }
        }

        return true; // Value is valid
    }
}
