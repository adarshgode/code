import java.util.Arrays;

class Solution {
    boolean f(int i, int j, String s, String p, Boolean[][] dp) {
        if (i < 0 && j < 0) {
            return true;  // Both string and pattern are completely matched
        }
        if (i < 0 && j >= 0) {
            // Check if remaining pattern is all '*'
            for (int k = 0; k <= j; k++) {
                if (p.charAt(k) != '*') {
                    return false;
                }
            }
            return true;
        }
        if (j < 0 && i >= 0) {
            return false;  // Pattern is exhausted, but string isn't
        }

        // Memoization check
        if (dp[i][j] != null) {
            return dp[i][j];
        }

        if (s.charAt(i) == p.charAt(j) || p.charAt(j) == '?') {
            return dp[i][j] = f(i - 1, j - 1, s, p, dp);  // Match or '?'
        }

        if (p.charAt(j) == '*') {
            // '*' can match 0 or more characters
            return dp[i][j] = f(i - 1, j, s, p, dp) || f(i, j - 1, s, p, dp);
        }

        return dp[i][j] = false;  // No match
    }

    public boolean isMatch(String s, String p) {
        int n = s.length();
        int m = p.length();
        Boolean[][] dp = new Boolean[n][m];  // Use Boolean[][] to handle null checks
        return f(n - 1, m - 1, s, p, dp);
    }
}
