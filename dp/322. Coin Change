class Solution {
    int f(int[] coins,int amount,int ind,int[][] dp){
        if (ind == 0) {
            // If T is divisible by the first element of the array, return the quotient
            if (amount % coins[0] == 0)
                return amount / coins[0];
            else
                // If not, return a large value to indicate it's not possible
                return (int) Math.pow(10, 9);
        }
        if(dp[ind][amount] != -1){
            return dp[ind][amount];
        }
        int notTake = 0 + f(coins,amount,ind-1,dp);
        int take = (int) Math.pow(10,9);
        if(coins[ind] <= amount){
        take = 1 + f(coins,amount-coins[ind],ind,dp);
        }
        return dp[ind][amount] = Math.min(take,notTake);
    }
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
    
        int dp[][] = new int[n][amount+1];
        for(int []row : dp){
            Arrays.fill(row,-1);
        }

        int ans = f(coins,amount,n-1,dp);
        if(ans >= (int) Math.pow(10,9)){
            return -1;
        }

        return ans;
    }
    
}
