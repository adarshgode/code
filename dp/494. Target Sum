class Solution {
    int f(int[] nums,int target,int ind,int[][] dp){
        if(ind == 0){
            if(target == 0 && nums[ind] == 0){
                return 2;
            }
            if(target == 0 || nums[0] == target){
                return 1;
            }
            return 0;
        }
        if(dp[ind][target] != -1) return dp[ind][target];
        int notTake = f(nums,target,ind-1,dp);
        int take = 0;
        if(nums[ind] <= target)
            take =f(nums,target-nums[ind],ind-1,dp);
        return dp[ind][target] = (take + notTake);
    }
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for(int i : nums){
            sum += i;
        }
        if(sum - target < 0){
            return 0;
        }
        if((sum -target) % 2 == 1){
            return 0;
        }
        int s2 = (sum - target)/2;

        int dp[][] = new int[nums.length][s2+1];

        for(int row[] : dp){
            Arrays.fill(row,-1);
        }

        return f(nums,s2,nums.length-1,dp);
    }

}
