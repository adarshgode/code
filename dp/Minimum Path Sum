class Solution {
    public int minPathSum(int[][] arr) {
        int[][] dp = new int[arr.length][arr[0].length];
        // for(int[] row:dp){
        //     Arrays.fill(row,-1);
        // }
        
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[0].length;j++){
                if(i==0 && j==0){
                    dp[i][j] = arr[i][j];
                }else{
                    int up = Integer.MAX_VALUE;
                    int left = Integer.MAX_VALUE;
                
                   if(i>0) up = arr[i][j] + dp[i-1][j];
                   if(j>0) left = arr[i][j] + dp[i][j-1];
                   dp[i][j] = Math.min(up,left);
                }
            }
        }
        return dp[dp.length-1][dp[0].length-1];

    }
    
}


// space optimize
class Solution {
    public int minPathSum(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
         int prev[] = new int[m];

        for (int i = 0; i < n; i++) {
            // Create a temporary array to store the current row values
            int temp[] = new int[m];

            for (int j = 0; j < m; j++) {
                if (i == 0 && j == 0)
                    temp[j] = matrix[i][j]; // If we're at the top-left cell, the minimum sum is its value
                else {
                    int up = matrix[i][j];
                    if (i > 0)
                        up += prev[j]; // Add the value from above if it's not out of bounds
                    else
                        up += (int) Math.pow(10, 9); // Add a large value if out of bounds in the up direction

                    int left = matrix[i][j];
                    if (j > 0)
                        left += temp[j - 1]; // Add the value from the left if it's not out of bounds
                    else
                        left += (int) Math.pow(10, 9); // Add a large value if out of bounds in the left direction

                    // Store the minimum of the two possible paths in the current cell
                    temp[j] = Math.min(up, left);
                }
            }
            // Update the previous row with the values of the current row
            prev = temp;
        }

        // The final result is stored in the last element of the previous row
        return prev[m - 1];

    }
    
}
