class Solution {
    int f(int ind,int buy,int[] prices,int n,int[][] dp){
        if(ind == n) return 0;
        if(dp[ind][buy] != -1) return dp[ind][buy];
        int profit = 0;
        if(buy != 0){
            profit = Math.max(-prices[ind]+f(ind+1,0,prices,n,dp),
            0+f(ind+1,1,prices,n,dp));
        }else{
            profit = Math.max(prices[ind]+f(ind+1,1,prices,n,dp),
            0+f(ind+1,0,prices,n,dp));
        }
        return dp[ind][buy] = profit;
    }
    public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length][2];
        for(int row[] : dp){
            Arrays.fill(row,-1);
        }
        return f(0,1,prices,prices.length,dp);
    }
}

//Tabulation Method
 public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length+1][2];
        for(int ind=prices.length-1;ind>=0;ind--){
            for(int buy=0;buy<=1;buy++){
                int profit = 0;
                if(buy!=0){
                    profit = Math.max(-prices[ind] + dp[ind+1][0],
                    0+dp[ind+1][1]);
                }else{
                    profit = Math.max(prices[ind]+dp[ind+1][1],
                    0+dp[ind+1][0]);
                }
                dp[ind][buy] = profit;
            }
        }
        return dp[0][1];
    }
