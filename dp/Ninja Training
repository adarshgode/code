import java.util.*;
public class Solution {
    // static int f(int day, int last, int[][] points, int[][] dp) {
    //     // If the result is already calculated, return it
    //     if (dp[day][last] != -1) return dp[day][last];

    //     // Base case: When it's the first day (day == 0)
    //     if (day == 0) {
    //         int maxi = 0;
    //         for (int i = 0; i <= 2; i++) {
    //             if (i != last)
    //                 maxi = Math.max(maxi, points[0][i]);
    //         }
    //         return dp[day][last] = maxi; // Store and return the result
    //     }

    //     int maxi = 0;
    //     // Loop through the three activities on the current day
    //     for (int i = 0; i <= 2; i++) {
    //         if (i != last) {
    //             // Calculate the points for the current activity and recursively
    //             // calculate the maximum points for the previous day
    //             int activity = points[day][i] + f(day - 1, i, points, dp);
    //             maxi = Math.max(maxi, activity); // Update the maximum points
    //         }
    //     }

    //     return dp[day][last] = maxi; // Store and return the result
    // }

    // // Function to find the maximum points for ninja training
    static int ninjaTraining(int n, int[][] points) {
        // Initialize a memoization table with -1 values
        int prev[] = new int[4];

        prev[0] = Math.max(points[0][1],points[0][2]);
        prev[1] = Math.max(points[0][0],points[0][2]);
        prev[2] = Math.max(points[0][0],points[0][1]);
        prev[3] = Math.max(points[0][1],Math.max(points[0][0],points[0][2]));

        for(int day=1;day<n;day++){
            int temp[] = new int[4];

            for(int last=0;last<4;last++){
                temp[last] = 0;
                for(int task=0;task<=2;task++){
                    if(task!=last){
                        temp[last] = Math.max(temp[last],points[day][task]+prev[task]);
                    }
                }
            }
            prev = temp;
        }
        return prev[3];
        
    }

}
