class Solution {
    public int numDistinct(String s, String t) {
        int n = s.length();
        int m = t.length();
        int dp[][] = new int[n+1][m+1];
        for(int[] row : dp){
            Arrays.fill(row,-1);
        }
        return f(n-1,m-1,s,t,dp);
    }
    int f(int i,int j,String s,String t,int[][] dp){
        if(j<0) return 1;

        if(i<0) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        if(s.charAt(i) == t.charAt(j)){
            return dp[i][j] = f(i-1,j-1,s,t,dp) + f(i-1,j,s,t,dp);
        }
        return dp[i][j] = f(i-1,j,s,t,dp);
    }
}

//tabulation method
public int numDistinct(String s, String t) {
        int n = s.length();
        int m = t.length();
        int dp[][] = new int[n+1][m+1];
        // for(int[] row : dp){
        //     Arrays.fill(row,-1);
        // }
        for(int i=0;i<=n;i++) dp[i][0] = 1;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s.charAt(i-1) == t.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[n][m];
        // return f(n-1,m-1,s,t,dp);
    }

//space optiimization
public int numDistinct(String s, String t) {
        int n = s.length();
        int m = t.length();
        int x = n>m?n:m;
        int[] prev = new int[x+1];
        int[] cur = new int[x+1];
        prev[0] = 1;
        cur[0] = 1;

        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s.charAt(i-1) == t.charAt(j-1)){
                    cur[j] = prev[j-1] + prev[j];
                }else{
                    cur[j] = prev[j];
                }
            }
            prev = cur.clone();
        }
        return cur[m];
        // return f(n-1,m-1,s,t,dp);
    }
