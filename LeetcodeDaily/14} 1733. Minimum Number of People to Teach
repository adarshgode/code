class Solution {
    public int minimumTeachings(int n, int[][] languages, int[][] friendships) {
        Set<Integer> sadUsers = new HashSet<>();
        for(int[] friends : friendships){
            int u = friends[0];
            int v = friends[1];
            int[] user1 = languages[u-1];
            int[] user2 = languages[v-1];
            boolean check = false;
            for(int i=0;i<user1.length;i++){
                for(int j=0;j<user2.length;j++){
                    if(user1[i] == user2[j]){
                        check = true;
                        break;
                    }
                }
            }
            if(!check){
                sadUsers.add(u);
                sadUsers.add(v);
            }
        }

        int[] mostKnowing = new int[n+1];
        int count = 0;
        for(int user : sadUsers){
            for(int lang : languages[user-1]) {
                mostKnowing[lang]++;
                count = Math.max(count,mostKnowing[lang]);
            }
        }

        return sadUsers.size()-count;
    }
}


//Approach (Greedily picking the mostKnown language among the sadUsers (those who cannpt talk to their friends))
//T.C : O(m*n)
//S.C : O(m+n)
class Solution {
    public int minimumTeachings(int n, int[][] languages, int[][] friendships) {
        Set<Integer> sadUsers = new HashSet<>(); // users who can't talk to their friend
        
        // Find sadUsers
        for (int[] friends : friendships) {
            int u = friends[0] - 1;
            int v = friends[1] - 1;
            
            // check if u and v share a common language
            Set<Integer> langSet = new HashSet<>();
            for (int lang : languages[u]) {
                langSet.add(lang);
            }
            
            boolean canTalk = false;
            for (int lang : languages[v]) {
                if (langSet.contains(lang)) {
                    canTalk = true;
                    break;
                }
            }
            
            // if they cannot talk, mark them as sad
            if (!canTalk) {
                sadUsers.add(u);
                sadUsers.add(v);
            }
        }
        
        // Count how many sadUsers already know each language
        int[] languageCount = new int[n + 1];
        int mostKnownLang = 0;
        
        for (int user : sadUsers) {
            for (int lang : languages[user]) {
                languageCount[lang]++;
                mostKnownLang = Math.max(mostKnownLang, languageCount[lang]);
            }
        }
        
        // total sadUsers - mostKnownLang
        return sadUsers.size() - mostKnownLang;
    }
