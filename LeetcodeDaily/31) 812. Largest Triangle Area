class Solution {
    public double largestTriangleArea(int[][] points) {
        int n = points.length;
        double maxArea = 0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                for(int k=j+1;k<n;k++){
                    int x1 = points[i][0];
                    int y1 = points[i][1];

                    int x2 = points[j][0];
                    int y2 = points[j][1];

                    int x3 = points[k][0];
                    int y3 = points[k][1];

                    // sholace formula;
                    double area = 0.5 * Math.abs(
                        x1 * (y2-y3) +
                        x2 * (y3-y1) +
                        x3 * (y1-y2)
                    );
                    // double a = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
                    // double b = Math.sqrt(Math.pow(x3 - x2, 2) + Math.pow(y3 - y2, 2));
                    // double c = Math.sqrt(Math.pow(x1 - x3, 2) + Math.pow(y1 - y3, 2));

                    // double s = (a + b + c) / 2.0;

                    // double area; 
                    // double expr = s * (s - a) * (s - b) * (s - c);
                    // if (expr <= 0) area = 0;   // collinear case
                    // else area = Math.sqrt(expr);

                    maxArea = Math.max(area,maxArea);
                }
            }
        }


        return maxArea;
    }
}
