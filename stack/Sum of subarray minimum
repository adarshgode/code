class Solution {
    public int sumSubarrayMins(int[] arr) {
        int n = arr.length;
        int sum = 0;
        int MOD = 1000000007;
        int[] nsl = getNSL(arr, n);
        int[] nsr = getNSR(arr, n);
        
        for(int i = 0; i < n; i++) {
            int ls = i - nsl[i];  // Distance to nearest smaller to the left
            int rs = nsr[i] - i;  // Distance to nearest smaller to the right
            int totalWays = ls * rs;  // Total subarrays where arr[i] is the minimum
            long totalSum = (long) totalWays * arr[i] % MOD;  // Modulo applied here
            sum = (sum + (int) totalSum) % MOD;  // Sum updated with modulo
        }
        
        return sum;
    }

    // Function to find the nearest smaller to the left
    int[] getNSL(int[] arr, int n) {
        int[] ans = new int[n];
        Stack<Integer> st = new Stack<>();
        
        for(int i = 0; i < n; i++) {
            while(!st.isEmpty() && arr[i] <= arr[st.peek()]) {
                st.pop();
            }
            ans[i] = st.isEmpty() ? -1 : st.peek();
            st.push(i);
        }
        return ans;
    }

    // Function to find the nearest smaller to the right
    int[] getNSR(int[] arr, int n) {
        int[] ans = new int[n];
        Stack<Integer> st = new Stack<>();
        
        for(int i = n - 1; i >= 0; i--) {
            while(!st.isEmpty() && arr[i] < arr[st.peek()]) {
                st.pop();
            }
            ans[i] = st.isEmpty() ? n : st.peek();
            st.push(i);
        }
        return ans;
    }
}
