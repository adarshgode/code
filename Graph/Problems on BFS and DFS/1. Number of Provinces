class Solution {
    public void dfs(int node, ArrayList<ArrayList<Integer>> adjls , int vis[])
    {
        vis[node] = 1;
        for(Integer it : adjls.get(node)){
            if(vis[it] == 0){
                dfs(it,adjls,vis);
            }
        }
    }

    public int findCircleNum(int[][] isConnected) {
        ArrayList<ArrayList<Integer>> adjls = new ArrayList<ArrayList<Integer>>();
        int v = isConnected.length;
        for(int i=0;i<v;i++){
            adjls.add(new ArrayList<Integer>());
        }
        for(int i=0;i<v;i++){
            for(int j=0;j<v;j++){
                if(isConnected[i][j] == 1 && i!=j){
                    adjls.get(i).add(j);
                }
                
            }
        }

        int vis[] = new int[v];
        int cnt=0;
        for(int i=0;i<v;i++){
            if(vis[i] == 0){
                cnt++;
                dfs(i,adjls,vis);
            }
        }

        return cnt;
    }
}
