//TC :- O(N) , SC:- O(N)
class Solution {
    public String reverseWords(String s) {
        StringBuilder sb = new StringBuilder();
        Stack<String> st = new Stack<>();
        s = s.trim();
        for(int i=0;i<s.length();i++){
            char t = s.charAt(i);
            if(t != ' '){
                sb.append(t);
            }
            else{
                if(sb.length() > 0)
                st.push(sb.toString());
                sb = new StringBuilder("");
            }
        }
        st.push(sb.toString());
        sb = new StringBuilder("");
        while(!st.isEmpty()){
            String t = st.pop();
            sb.append(t);
            if(!st.isEmpty() && t!=" "){
                sb.append(" ");
            }
        }
        return sb.toString();
    }
}


//TC :- O(N), SC :- O(1)

class Solution {
    public String reverseWords(String s) {
        StringBuilder sb = new StringBuilder();
        s = s.trim();
        int j =s.length()-1;
        int i = j-1;
        while(i>=0){
            if(s.charAt(i) == ' '){
                String t = s.substring(i+1,j+1);
                if(j==s.length()-1){
                    sb.append(t+ " ");
                }else {
                    sb.append(t);
                }
                while(i>0 && s.charAt(i) == ' '){
                    i--;
                }
                j =i+1;
            }
            i--;
        }
        if(sb.length() == 0){
            return s;
        }
        sb.append(s.substring(i+1,j));
        return sb.toString();
    }
}
